{"version":3,"sources":["context/AppReducer.js","context/GlobalContext.js","components/Session.js","components/Break.js","sounds/dong.mp3","sounds/ding.mp3","components/Display.js","App.js","index.js"],"names":["AppReducer","state","action","type","session","breaks","initialState","TimeProvider","children","useReducer","dispatch","TimeContext","Provider","value","incrementSession","decrementSession","incrementBreak","decrementBreak","createContext","Session","useContext","className","onClick","viewBox","fill","d","Break","Display","lasting","breaking","useState","title","setTitle","playing","setPlaying","initialCount","toString","count","setCount","study","setStudy","orange","setOrange","clear","setClear","useSound","dong","play1","ding","play2","timer","setTimer","minutes","setMinutes","seconds","setSeconds","useEffect","prevMinutes","parseInt","prevSeconds","setTimeout","console","log","countDown","prevTimer","handleTime","study_length","break_length","control","duration","setInterval","clearInterval","App","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46e450be.chunk.js","sourcesContent":["const AppReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'SESSION_UP':\r\n            return {\r\n                ...state,\r\n                session: state.session + 1\r\n            }\r\n        case 'SESSION_DOWN':\r\n            return {\r\n                ...state,\r\n                session: state.session - 1\r\n            }\r\n        case 'BREAK_UP':\r\n            return {\r\n                ...state,\r\n                breaks: state.breaks + 1,\r\n            }\r\n        case 'BREAK_DOWN':\r\n            // console.log(state.breaks);\r\n            return {\r\n                ...state,\r\n                breaks: state.breaks - 1\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default AppReducer;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\nconst initialState = {\r\n    session: 25,\r\n    breaks: 5\r\n}\r\n\r\nexport const TimeProvider = ({ children }) => {\r\n    \r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n    \r\n    // Actions\r\n    function incrementSession() {\r\n        dispatch({\r\n            type: 'SESSION_UP'\r\n        });\r\n    }\r\n\r\n    function decrementSession() {\r\n        dispatch({\r\n            type: 'SESSION_DOWN'\r\n        });\r\n    }\r\n\r\n    function incrementBreak() {\r\n        dispatch({\r\n            type: 'BREAK_UP'\r\n        });\r\n    }\r\n\r\n    function decrementBreak() {\r\n        dispatch({\r\n            type: 'BREAK_DOWN'\r\n        });\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n        <TimeContext.Provider value={{\r\n            session: state.session,\r\n            breaks: state.breaks, \r\n            incrementSession,\r\n            decrementSession,\r\n            incrementBreak,\r\n            decrementBreak\r\n        }}>\r\n            {children}\r\n        </TimeContext.Provider>\r\n    )\r\n}\r\n\r\nexport const TimeContext = createContext(initialState);","import { useContext } from 'react';\r\nimport { TimeContext } from '../context/GlobalContext';\r\n\r\n\r\nexport const Session = () => {\r\n    const { session, incrementSession, decrementSession } = useContext(TimeContext);\r\n    return (\r\n        <div className='stage' >\r\n            <h3>Session Length</h3>\r\n            <h4>{session} min</h4>\r\n            <div className='arrows'>\r\n                <button onClick={session>1 && (() => decrementSession())}>\r\n                    <svg className='arrow' viewBox=\"0 0 24 24\">\r\n                        <path fill=\"currentColor\" d=\"M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z\" />\r\n                    </svg>\r\n                </button>\r\n                <button onClick={session<60 && (() => incrementSession())}>\r\n                    <svg className='arrow' viewBox=\"0 0 24 24\">\r\n                        <path fill=\"currentColor\" d=\"M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z\" />\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { TimeContext } from '../context/GlobalContext';\r\n\r\nexport const Break = () => {\r\n    // const {breaks} = useContext(TimeContext);\r\n    const { breaks, decrementBreak, incrementBreak } = useContext(TimeContext);\r\n    // const { incrementBreak } = useContext(TimeContext);\r\n    return (\r\n        <div className='stage' >\r\n            <h3>Break Length</h3>\r\n            <h4>{breaks} min</h4>\r\n            <div className='arrows'>\r\n                <button\r\n                 onClick={breaks>1 && (() => decrementBreak())}\r\n                  >\r\n                    <svg className='arrow' viewBox=\"0 0 24 24\">\r\n                        <path fill=\"currentColor\" d=\"M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z\" />\r\n                    </svg>\r\n                </button>\r\n                <button onClick={breaks<60 && (() => incrementBreak())}>\r\n                    <svg className='arrow' viewBox=\"0 0 24 24\">\r\n                        <path fill=\"currentColor\" d=\"M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z\" />\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/dong.de79dce4.mp3\";","export default __webpack_public_path__ + \"static/media/ding.303bca13.mp3\";","import React, { useContext, useState, useEffect } from 'react';\r\nimport { TimeContext } from '../context/GlobalContext';\r\nimport useSound from 'use-sound';\r\nimport dong from '../sounds/dong.mp3';\r\nimport ding from '../sounds/ding.mp3';\r\n\r\n\r\nexport const Display = () => {\r\n    \r\n    // break and session lengths\r\n    const { breaks, session } = useContext(TimeContext);\r\n\r\n    // break and session lengths in seconds\r\n    const lasting = session*60;\r\n    const breaking = breaks*60;\r\n\r\n    // testing length values\r\n    // const lasting = 70;\r\n    // const breaking = 10;\r\n\r\n    // title in display\r\n    const [title, setTitle] = useState('Press play to start');\r\n\r\n    // playing variable --> know if the countdown is counting or not\r\n    const [playing, setPlaying] = useState(false);\r\n\r\n    // initialCount to display\r\n    const initialCount = session.toString() + \":00\";\r\n    // count variable to display\r\n    const [count, setCount] = useState(initialCount);\r\n\r\n    // study variable --> true if we are studying/in a session\r\n    const [study, setStudy] = useState(true);\r\n\r\n    // orange variable to set className 'orange' when count<1min\r\n    const [orange, setOrange] = useState(false);\r\n\r\n    // clear variable to clear the interval and store it??\r\n    const [clear, setClear] = useState();\r\n\r\n    // sound functions to play when session/break ends\r\n    const [play1] = useSound(dong);\r\n    const [play2] = useSound(ding);\r\n\r\n    // timer, minutes and seconds variables\r\n    const [timer, setTimer] = useState();\r\n    const [minutes, setMinutes] = useState();\r\n    const [seconds, setSeconds] = useState(); \r\n\r\n\r\n    // useEffects: \r\n\r\n    // whenever count changes:\r\n    useEffect( () => {\r\n        // console.log(count);\r\n    }, [count]);\r\n\r\n    // whenever timer changes:\r\n    useEffect( () => {\r\n        // console.log(timer, parseInt(timer % 60, 10), seconds);\r\n        if(playing && timer>0) {\r\n            // we calculate the minutes and seconds remaining respecting the digital time rendering condition\r\n            setMinutes(prevMinutes => (parseInt(timer / 60, 10) < 10) ? \"0\" + parseInt(timer / 60, 10) :  parseInt(timer / 60, 10));\r\n            setSeconds (prevSeconds => (parseInt(timer % 60, 10) < 10) ? \"0\" + parseInt(timer % 60, 10) : parseInt(timer % 60, 10));\r\n        }\r\n        // when count<1min --> set orange to true (only once)\r\n        if (timer < 60 && !orange) {\r\n            setTimeout(setOrange(true), 2000);\r\n        }\r\n        // when count is finished\r\n        if(timer===0) {\r\n            // set orange to false\r\n            setOrange(false);\r\n\r\n            // if we were studying\r\n            if(study) {\r\n                console.log('finished studying')\r\n            \r\n                // play the second song\r\n                play2();\r\n\r\n                // set title to break\r\n                setTitle('Time for a break')\r\n                \r\n                // set timer to break length\r\n                setTimer(breaking);\r\n\r\n                // set study to false\r\n                setStudy(false);\r\n            }\r\n            \r\n            if(!study) {\r\n                console.log('finished break')\r\n                \r\n                // play the first song\r\n                play1();\r\n\r\n                // set title to study\r\n                setTitle('Time to focus');\r\n\r\n                // set timer to session length\r\n                setTimer(lasting);           \r\n                \r\n                // set study to true\r\n                setStudy(true);\r\n            }\r\n        }\r\n        // console.log(timer, minutes, seconds);\r\n    }, [timer]);\r\n\r\n    // whenever minutes changes\r\n    useEffect( () => {\r\n        // console.log(minutes);\r\n    }, [minutes]);\r\n\r\n    // whenever minutes changes\r\n    useEffect( () => {\r\n        if(playing) {\r\n            // we set the count to display current timer\r\n            setCount(minutes + \":\" + seconds);\r\n        }\r\n        \r\n        // console.log(seconds);\r\n    }, [seconds]);\r\n    \r\n\r\n        // si clico en reiniciar y quitando el timeout pasaría lo siguiente:\r\n        // setTimeout(function() {\r\n        //     if(true) {\r\n        //         clearInterval(interval);\r\n        //         console.log(lasting);\r\n        //         timer=lasting;\r\n        //         setPlaying(false);\r\n        //         setTitle('Press play to start')\r\n        //     }\r\n        // } ,4000) \r\n   \r\n\r\n    // 1st countdown 2nd restart 3rd pause/play\r\n\r\n\r\n    const countDown = () => {\r\n        // we substract one second to timer\r\n        setTimer(prevTimer => prevTimer - 1);\r\n    }\r\n\r\n    const startPlaying = (duration) => {\r\n        \r\n        console.log('playing', duration)\r\n\r\n        // we initialize the timer (if we have paused (playing== still true) --> we don't initialize)\r\n        if(!playing) {\r\n            setTimer(duration);\r\n        }\r\n\r\n        // conditional render of the count --> if play=true then show the count variable (this is because initialCount updates when length changes but not count variable (useState only runs one time initially))\r\n        setTimeout( function() { setPlaying(true);}, 1000);\r\n\r\n        // we change the title based on study state\r\n        if(study) {\r\n            setTitle('Time to focus');\r\n        }\r\n        if(!study) {\r\n            setTitle('Time for a break');\r\n        }\r\n\r\n        // first substraction before setInterval (initial condition --> not to be undefined)\r\n\r\n\r\n         // we define a setInterval to run a function every second\r\n        setClear(setInterval(countDown, 1000));\r\n    }\r\n\r\n    const pausePlaying = () => {\r\n        // we stop counting down\r\n        clearInterval(clear);\r\n        // we change the title to show that the timer is paused\r\n        setTitle('Paused');\r\n\r\n        console.log('paused')\r\n    }\r\n\r\n    const restartPlaying = () => {\r\n        // we stop counting down\r\n        clearInterval(clear);\r\n        // we change the title to start again\r\n        setTitle('Press play to restart');\r\n        // we are going to start studying again\r\n        setStudy(true);\r\n        // we set the timer to the session length\r\n        setTimer(lasting);\r\n        // we are not playing --> we display the initial count\r\n        setPlaying(false);\r\n        console.log('restarting')\r\n    }\r\n\r\n    const handleTime = (study_length, break_length, control) => {\r\n        if(control==='play') {\r\n            // i want to start the counter\r\n            startPlaying(study_length);\r\n        }\r\n        else if(control === 'pause') {\r\n            // i want to pause the counter\r\n            pausePlaying()\r\n        }\r\n        else {\r\n            // i want to restart the counter\r\n            restartPlaying()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='display'>\r\n            <h1> {title}\r\n            {/* {console.log(count, initialCount)} */}\r\n            </h1>\r\n            <h1 className={orange ? 'time-left' : 'standard'}> {playing ? count : initialCount} </h1>\r\n            <div className='controls'>\r\n                <button onClick={() => handleTime(lasting, breaking, 'play')}>\r\n                    <svg className='control' viewBox=\"0 0 24 24\">\r\n                        <path fill=\"currentColor\" d=\"M8,5.14V19.14L19,12.14L8,5.14Z\" />\r\n                    </svg>\r\n                </button>\r\n                <button \r\n                onClick={() => handleTime(lasting, breaking, 'pause')}\r\n                >\r\n                    <svg className='control' viewBox=\"0 0 24 24\">\r\n                        <path fill=\"currentColor\" d=\"M14,19H18V5H14M6,19H10V5H6V19Z\" />\r\n                    </svg>\r\n                </button>\r\n                <button \r\n                onClick={() => handleTime(lasting, breaking, 'restart')}\r\n                >\r\n                    <svg className='control' viewBox=\"0 0 24 24\">\r\n                        <path fill=\"currentColor\" d=\"M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z\" />\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.scss';\nimport { Session } from './components/Session';\nimport { Break } from './components/Break';\nimport { Display } from './components/Display';\nimport { TimeProvider } from './context/GlobalContext';\n\nfunction App() {\n  return (\n    <TimeProvider>\n      <div className=\"App\">\n        <h1 className='title'>My Pomodoro Timer</h1>\n        <div className='stages' >\n          <Session id='session' />\n          <Break id='break' />\n        </div>\n        <Display />\n      </div>\n    </TimeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}